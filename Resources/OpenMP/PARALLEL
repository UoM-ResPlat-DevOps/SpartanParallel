
# Text from Lawrence Livermore National Laboratory
# A parallel region is a block of code that will be executed by multiple threads. This is the fundamental OpenMP parallel construct.
# Fortran Version


!$OMP PARALLEL [clause ...] 
               IF (scalar_logical_expression) 
               PRIVATE (list) 
               SHARED (list) 
               DEFAULT (PRIVATE | FIRSTPRIVATE | SHARED | NONE) 
               FIRSTPRIVATE (list) 
               REDUCTION (operator: list) 
               COPYIN (list) 
               NUM_THREADS (scalar-integer-expression)

   block

!$OMP END PARALLEL


# C/C++ Version

#pragma omp parallel [clause ...]  newline 
                     if (scalar_expression) 
                     private (list) 
                     shared (list) 
                     default (shared | none) 
                     firstprivate (list) 
                     reduction (operator: list) 
                     copyin (list) 
                     num_threads (integer-expression)

 
   structured_block



# When a thread reaches a PARALLEL directive, it creates a team of threads and becomes the master of the team. The master is a member of that team and has thread number 0 within that team.
# Starting from the beginning of this parallel region, the code is duplicated and all threads will execute that code.
# There is an implied barrier at the end of a parallel region. Only the master thread continues execution past this point.
# If any thread terminates within a parallel region, all threads in the team will terminate, and the work done up until that point is undefined.





