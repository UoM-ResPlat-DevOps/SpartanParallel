# Don't do this on the head node.
# Many of these examples are from Lev Lafayette, Sequential and Parallel Programming with C and Fortran, VPAC, 2015-2016, ISBN 978-0-9943373-1-3,  https://github.com/VPAC/seqpar 

$ sinteractive --time=6:00:00

$ module load GCC/4.9.2

# Export with the number of threads desired. Note that it is most efficient to have a number of cpus equal to the number of threads.

$ export OMP_NUM_THREADS=8

# Compile with OpenMP directives. These examples use free-form for Fortran e.g., 
$ gcc -fopenmp helloomp.c -o helloompc
$ gfortran -fopenmp helloomp.f90 -o helloompf

# Execute the programs

$ ./helloompc
$ ./helloompf

# Note that creating executables with different compilers requires a different compiler command OpenMP flag. For example:

$ module load intel/2017.u2
$ icc -qopenmp helloomp.c -o hellompc
$ ifort -qopenmp helloomp.f90 -o hellompf
$ ./helloompc
$ ./helloompf

$ module load PGI/18.5
$ pgcc -mp helloomp.c -o hellompc
$ pgf90 -mp helloomp.f90 -o hellompf
$ ./helloompc
$ ./helloompf

# Parallel regions can call functions within them with parallel regions. By default, these have 1 thread unless an environment variable is set.
# This example from Oracle's Sun Studio 12: OpenMP API User's Guide

$ gcc -fopenmp nested.c -o nestedc
$ OMP_NESTED=true
$ ./nestedc
$ OMP_NESTED=false
$ ./nestedc

# The same variable name can have different values with the parallel section and outside it.

$ gcc -fopenmp sharedhello.c -o sharedhelloompc
$ gfortran -fopenmp sharedhello.f90 -o sharedhelloompf
$ ./sharedhelloompc
$ ./sharedhelloompf

# One of the most typical applications is the parallelisation of loops. This includes a worksharing construct, which distributes the execution of the parallel region among the thread team members. There is an implicit barrier at the end of a loop construct, unless a `nowait` clause has been stated. Loop iteration variables are private by default. 
# Note that this example makes use of "parallel for" and "parallel do". In most cases they are mostly equivalent; parallel spawns a group of threads, while the for/do divides loop iterations between the spawned threads.

$ gcc -fopenmp hello1millomp.c -o hello1millc
$ gfortran -fopenmp hello1millomp.f90 -o hello1millf
$ ./hello1millc
$ ./hello1millf

# Sometimes separating them is a good idea for "thread aware" constructions. e.g.,

#pragma omp parallel
{ 
    #pragma omp for
    for(1...10) // first parallel block
    {
    }

    #pragma omp single 
    {} // single thread processing

    #pragma omp for // second parallel block
    for(1...10)
    {
    }

    #pragma omp single 
    {} // make some single thread processing again
}

# There is also the simd directive; this allows loop iterations to be executed on SIMD lanes that are available to the thead.
# OpenMP only used to exploit multiple threads for multiple cores; the newer simd extention allows use of SIMD instructions on modern CPUs, such as Intel's AVX/SSE and ARM's NEON etc.

$ gfortran -fopenmp hello1millsimd.f90 -o hello1millsimdf
$ gcc -fopenmp hello1millsimd.c -o hello1millsimdc

$ ./hello1millsimdf
$ ./hello1millsimdc

[EDIT UP TO HERE]


# The sections construct distributes threads among structured blocks

gfortran -fopenmp hello3versomp.f90 -o hello3versompf
gcc -fopenmp hello3versomp.c -o hello3versompc

$ ./hello3versompf
$ ./hello3versompc

#  The `task` constructs are very useful to mosty efficiently implement parallelism. The general principle is that a thread generates tasks which are then executed according to the runtime system, either immediately or delayed.

$ gfortran -fopenmp colourless-3.f90 -o colourless-3f
$ gcc -fopenmp colourless-3.c -o colourless-3c

$ ./colourless-3f
$ ./colourless-3c

# Internal control variables and their interactions with runtime library routines are illustrated by the examples icv1.f90 and icv1.c. 
# Four ICV's - nest-var, mex-active-levels-var, dyn-var, and nthreads-var - are modified by calls their respective library routines (omp_set_nested(), omp_set_max_active_levels(), omp_set_dynamic(), and omp_set_num_threads()).

$ gcc -fopenmp icv1.c -o icv1c
$ gfortran -fopenmp icv1.f90 -o icv1f
$ ./icv1c
$ ./icv1f


